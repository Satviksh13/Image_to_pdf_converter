<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image to PDF Converter</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="/styles.css" rel="stylesheet">
    <style>
        .drop-zone {
            border: 2px dashed #4a5568;
            transition: all 0.3s ease;
        }
        .drop-zone.dragover {
            border-color: #4299e1;
            background-color: #ebf8ff;
        }
        .alert {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            z-index: 1000;
            opacity: 0;
            transform: translateY(-20px);
        }
        .alert.show {
            opacity: 1;
            transform: translateY(0);
        }
        .alert-success {
            background-color: #48bb78;
            color: white;
        }
        .alert-error {
            background-color: #f56565;
            color: white;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="max-w-2xl mx-auto bg-white rounded-lg shadow-lg p-6">
            <h1 class="text-3xl font-bold text-center text-gray-800 mb-2">Image to PDF Converter</h1>
            <p class="text-center text-gray-600 mb-8">Convert multiple JPG/PNG images into a single PDF file</p>
            
            <div class="drop-zone rounded-lg p-8 text-center mb-4" id="dropZone">
                <div class="space-y-4">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                    </svg>
                    <p class="text-gray-600">Drag and drop your JPG/PNG images here</p>
                    <p class="text-sm text-gray-500">or</p>
                    <input type="file" id="fileInput" multiple accept="image/jpeg,image/png" class="hidden">
                    <button onclick="document.getElementById('fileInput').click()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition">
                        Select Files
                    </button>
                </div>
            </div>

            <div id="preview" class="grid grid-cols-2 gap-4 mb-4"></div>

            <div class="flex items-center justify-between mb-4">
                <span id="fileCount" class="text-gray-600">0 files selected</span>
                <button id="clearAllBtn" class="text-red-500 hover:text-red-600" style="display: none;">
                    Clear All
                </button>
            </div>

            <button id="convertBtn" class="w-full bg-green-500 text-white py-3 rounded-lg font-semibold hover:bg-green-600 transition disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                Convert to PDF
            </button>
        </div>
    </div>

    <div id="loading" class="loading" style="display: none;">
        <div class="loading-spinner"></div>
    </div>

    <div id="alert" class="alert">
        <span id="alertMessage"></span>
    </div>

    <script>
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const preview = document.getElementById('preview');
        const convertBtn = document.getElementById('convertBtn');
        const clearAllBtn = document.getElementById('clearAllBtn');
        const fileCount = document.getElementById('fileCount');
        const loading = document.getElementById('loading');
        const alert = document.getElementById('alert');
        const alertMessage = document.getElementById('alertMessage');
        let files = [];

        function showAlert(message, type) {
            alertMessage.textContent = message;
            alert.className = `alert alert-${type}`;
            alert.classList.add('show');
            
            setTimeout(() => {
                alert.classList.remove('show');
            }, 5000);
        }

        // Drag and drop handlers
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropZone.classList.add('dragover');
        }

        function unhighlight() {
            dropZone.classList.remove('dragover');
        }

        dropZone.addEventListener('drop', handleDrop, false);
        fileInput.addEventListener('change', handleFiles, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const droppedFiles = [...dt.files];
            const validFiles = droppedFiles.filter(file => 
                file.type === 'image/jpeg' || file.type === 'image/png'
            );
            
            if (droppedFiles.length > 0 && validFiles.length === 0) {
                showAlert('Please drop only JPG or PNG images.', 'error');
                return;
            }
            
            if (validFiles.length > 0) {
                handleFiles({ target: { files: validFiles } });
            }
        }

        function handleFiles(e) {
            const newFiles = [...e.target.files].filter(file => 
                file.type === 'image/jpeg' || file.type === 'image/png'
            );
            
            if (newFiles.length === 0) {
                showAlert('Please select only JPG or PNG images.', 'error');
                return;
            }
            
            files = [...files, ...newFiles];
            updatePreview();
            updateUI();
            
            showAlert(`${newFiles.length} image${newFiles.length !== 1 ? 's' : ''} added successfully.`, 'success');
        }

        function updatePreview() {
            preview.innerHTML = '';
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'preview-image';
                    div.innerHTML = `
                        <img src="${e.target.result}" class="w-full h-32 object-cover">
                        <button onclick="removeFile(${index})" class="remove-btn">
                            Ã—
                        </button>
                        <span class="absolute bottom-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                            ${file.name}
                        </span>
                    `;
                    preview.appendChild(div);
                };
                reader.readAsDataURL(file);
            });
        }

        function updateUI() {
            fileCount.textContent = `${files.length} file${files.length !== 1 ? 's' : ''} selected`;
            convertBtn.disabled = files.length === 0;
            clearAllBtn.style.display = files.length > 0 ? 'block' : 'none';
        }

        function removeFile(index) {
            const fileName = files[index].name;
            files.splice(index, 1);
            updatePreview();
            updateUI();
            showAlert(`Image "${fileName}" removed.`, 'success');
        }

        clearAllBtn.addEventListener('click', () => {
            files = [];
            updatePreview();
            updateUI();
            showAlert('All images cleared.', 'success');
        });

        convertBtn.addEventListener('click', async () => {
            if (files.length === 0) return;

            loading.style.display = 'flex';
            convertBtn.disabled = true;

            const formData = new FormData();
            files.forEach(file => {
                formData.append('images', file);
            });

            try {
                const response = await fetch('/convert', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    // For better debugging
                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/pdf')) {
                        console.error('Unexpected content type:', contentType);
                        const textResponse = await response.text();
                        console.error('Response text:', textResponse);
                        throw new Error('Server returned an invalid response');
                    }

                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'converted.pdf';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    a.remove();
                    
                    // Clear files after successful conversion
                    files = [];
                    updatePreview();
                    updateUI();
                    showAlert('PDF created successfully!', 'success');
                } else {
                    let errorMsg = 'Error converting images to PDF';
                    try {
                        const errorData = await response.json();
                        if (errorData && errorData.error) {
                            errorMsg = errorData.error;
                        }
                    } catch (e) {
                        // If the response is not JSON, just use the default error message
                    }
                    showAlert(errorMsg, 'error');
                }
            } catch (error) {
                console.error('Error details:', error);
                showAlert(`Error: ${error.message}`, 'error');
            } finally {
                loading.style.display = 'none';
                convertBtn.disabled = false;
            }
        });
    </script>
</body>
</html> 